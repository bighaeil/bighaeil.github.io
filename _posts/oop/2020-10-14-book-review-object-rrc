---
title: "CHEPTER 4 - 역할, 책임, 협력"
categories: 
  - oop
tags:
  - oop
  - review
last_modified_at: 2020-10-14T20:00:00+09:00
toc: true
toc_sticky: true
---

# 역할 책임 협력

(`오브젝트를` 포스트로는 5번째 챕터로는 3번째를 하면서 느낀점 - 어려워서 손이 잘 안간다. 반성하자.)

오브젝트의 가장 중요하다고 하고 나 역시 중요하다고 생각하는 개념시간 이다.  
전 장까지는 구현 기법과 약간의 개념을 같이 살펴봤다면 이번 장에서는 개념 위주로 살펴볼 것 이다.  
이번 장을 읽으면서 지금까지 JAVA 도서 위주로 배웠던 객체지향은 사실 구현과 문법위주의 설명이 었다는 것을 깨닫게 되었다.(~~전에도 잘 설명 했지만 내가 이해를 못했을 가능성이 클지도~~)


# 관점

객체지향의 핵심은  

> 역할(role), 책임(responsibility), 협력(colloboration)

클래스, 상속, 지연 바인딩이 중요하지 않은 것은 아니지만 이는 `구현` 측면으로 객체지향 본질과는 다르다.


## 협력

협력이란  

> 어떤 객체가 다른 객체에게 무언인가를 요청하는 것

객체 사이의 협력을 위해 `메시지` 전송하고 메시지를 수신한 객체는 이를 처리하기 위해 `메서드`를 선택한다. 그래서 어떻게 처리할지를 `직접` 결정한다.  

객체가 직접 결정한다는 이야기는 자율적으로 만든다는 이야기고 이는 내부 구현을 `캡슐화`한다는 것이다.

내 생각이지만 객체지향에서 가장 중요하다고 생각하는 개념은 `캡슐화`라고 생각한다.  
객체가 자기 자신으로 존재하면서 다른 객체와 상호작용할 수 있도록 할 수 있도록 하는 전제가 내부의 구현이 간섭받지 않기 때문이다.  

그러면 객체는 상태와 행동을 어떻게 결정할까?  

객체 자신의 존재 이유는 다른 객체와의 상호작용 때문에 즉  

> 객체가 참여하고 있는 협력으로 결정된다.

짧게 한 단어로 말하면

> 문맥(context)


## 책임

책임이란

> 객체가 수행하는 행동

객체의 행동이란 행위의 집합으로 크레이그 라만(Craig Larman)은 분류에 따라 객체를 크게 

> 하는 것(doing)과 아는 것(knowing)

으로 나눈다.

이전 영화 예메 시스템을 다시 떠올려 보자.

`상영`의 책임은 무엇인가? - 영화를 예매하는 것 - doing  
`영화`의 책임은 무엇인가? - 요금을 계산하는 것 - doing  
(~~멋진 영화를 상영하는 것이 아니라 시스템 상에서 이다.~~)

`상영`이 알아야 하는 것(knowing)은 무엇인가? - 상영할 영화를 알아야 한다.  
`영화`가 알아야 하는 것(knowing)은 무엇인가? - 가격과 할인 정책이 되겠다.  

이전 포스트를 통해 영화 예메 시스템의 코드를 살펴보면 위 같은 객체의 책임이 구현되어 있다. 즉  

> 협력 안에서 객체에게 할당한 책임이 외부의 인터페이스와 내부의 속성으로 결정된다.  

아는 것과 하는 것의 크기는 변할 수 있다.  
처음의 책임보다 더 많은 객체를 알아야 하는 경우도 있을 수 있겠고 (처리)해야할 일이 많아 질 수도 있겠다. 책임의 크기가 커질 수 있지만 각각의 객체가 아는 것과 하는 것을 책임지고 처리하면 되는 것만 기억하자.  

> 객체의 설계에서 가장 중요한 것은 책임  

가끔 아무나 붙잡고 테스트를 물어보면 가장 작은 단위로 쪼개서 작성하라고 하는 말을 자주들었다. 아마 이런 책임을 의미하던게 아닌까 생각한다.  

## 역할

역할이란

> 책임의 집합

이렇게 말하면 이해가 잘 안되는데 이전 예제를 다시 확인해보자.  
